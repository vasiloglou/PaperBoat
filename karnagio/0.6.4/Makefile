## Multi-purpose CMake/Emacs/Vim common-tasks wrapper
#
# @file   Makefile
# @author Ryan N. Riegel
# @date   2010-01-14
#
# This Makefile contains build targets to help with:
#
#   - Managing CMake build types in separate directories
#   - Compiling/running unit tests registered with CTest
#   - Installing compiled binaries into standard locations
#   - Packaging binaries and/or source for distribution
#   - Auto-indenting and -formatting code with AStyle
#   - Generating and registering Emacs/Vim tags tables
#   - Clean-up after compilation and of Emacs temporaries
#
# See targets' documentation below for more information.

## Build types available for this project
#
# These are passed to CMake with -CMAKE_BUILD_TYPE=<type>.  If your
# project defines additional build types, adding them to this list
# defines additional make targets for compilation under them.
BUILDS  = general release minsize debug efence

## Used if no build type has been given or previously configured
DEFAULT = general

## Suffix used to distinguish build directories, as "<type>.$D"
D       = build
## File used to tag the previously configured build directory
A       = active

## Specifies the build type used in generic targets ("all", etc.)
#
# To choose the working build type, provide ACTIVE=<type> on the
# command line or as an environment variable or use specific targets
# such as "debug".  Otherwise, generic targets reuse the previously
# configured build type, or ${DEFAULT} if none have been configured.
ACTIVE := ${word 1,${subst ., ,${wildcard *.$D/.$A} ${DEFAULT}}}

# Export enviromental variables that help cmake find the packages
UNAME=$(shell uname)
ifeq ($(findstring MINGW,${UNAME}), MINGW)
export CMAKE_INCLUDE_PATH=/include
export CMAKE_LIBRARY_PATH=/lib 
endif 

#
# Generic targets to perform tasks on active build type
#

all:       ${ACTIVE}
all-tests: ${ACTIVE}-tests

config:    config-${ACTIVE}
test:      test-${ACTIVE}
install:   install-${ACTIVE}
package:   package-${ACTIVE}

.PHONY: all all-tests config test install package



#
# Variables controling behavior
#

## Silence make output unless VERBOSE is nonempty
${VERBOSE}.SILENT:

MAKE        = make
MAKE_OPTS   = ${if $J,-j$J} --no-print-directory
TEST_OPTS   = ${MAKE_OPTS} -k

CMAKE       = cmake
CMAKE_OPTS  = ${if ${VERBOSE},-DVERBOSE=true}
CMAKE_BUILD = -DCMAKE_BUILD_TYPE=$*
ifeq ($(findstring MINGW, ${UNAME}), MINGW)
CMAKE_GEN   = -G "MSYS Makefiles"  
else
CMAKE_GEN   =""
endif

CTEST       = ctest
CTEST_OPTS  = ${if $R,-R $R} ${if $E,-E $E}

CPACK       = cpack
CPACK_OPTS  = ${if $G,-G $G}
BIN_CONFIG  = $*.$D/CPackConfig.cmake
SRC_CONFIG  = ${ACTIVE}.$D/CPackSourceConfig.cmake

ASTYLE      = astyle
ASTYLE_OPTS = -s2 -ay -CSKw -pU -v

DOXYGEN     = doxygen
DOXY_OPTS   =
DOXY_NAME   = PROJECT_NAME=${shell pwd | sed 's@.*/\(.*\)-.*@\1@'}
DOXY_NUMBER = PROJECT_NUMBER=${shell pwd | sed 's@.*-\(.*\)@\1@'}

ETAGS       = etags
ETAGS_OPTS  =
ETAGS_FILE  = .eTAGS
LOCALS_FILE = .dir-locals.el

CTAGS       = ctags
CTAGS_OPTS  =
CTAGS_FILE  = .cTAGS
EXRC_FILE   = .exrc

## A simple .dir-locals.el file to register eTAGS with Emacs
TAGS_LOCALS = ";; Generated by make target 'etags'" \
	"\n((nil"                                   \
	"\n  . ((tags-table-list"                   \
	"\n      . (\"${abspath ${ETAGS_FILE}}\"))" \
	"\n     ))"                                 \
	"\n )"

## A simple .exrc file to register cTAGS with Vim
TAGS_EXRC   = "set tags=${CTAGS_FILE}"

## Absolute path to this project's include directory
I           = ${abspath include}
## Absolute path to this project's source directory
S           = ${abspath src}

## Regular expression matching source files
SRC_PATTERN = ".*\.\(cc\|hh\|[ch]\(pp\|xx\|\+\+\)?\)"
## All source files built by this project
SOURCES     = ${shell find $I $S -iregex ${SRC_PATTERN}}

## Regular expression matching temporary files
TMP_PATTERN = ".*\(\.orig\|\.bak\|~\|/\#[^/]*\#\|/\.\#[^/]*\)"
## Temporary files throughout this project's directory tree
TEMPORARIES = ${shell find . -iregex ${TMP_PATTERN}}

#
# Targets to build and configure specific build types
#

.PHONY: ${BUILDS:%=config-%} ${BUILDS} ${BUILDS:%=%-tests}

## make <type>: Build the project under the given build type
#
# Define J=<jobs> to enable parallel compilation jobs.  Define
# T=<targets> to list specific compilation targets.
${BUILDS}: %: config-%
	cd $*.$D && ${MAKE} ${MAKE_OPTS} $T

## make <type>-tests: Build unit tests under the given build type
${BUILDS:%=%-tests}: %-tests: config-%
	-cd $*.$D && ${MAKE} ${TEST_OPTS} all-tests

## make config-<type>: Configure CMake under the given build type
#
# Define S=<path> to locate the project's root CMakeLists.txt.
${BUILDS:%=config-%}: config-%: %.$D/.$A
	cd $*.$D && ${CMAKE} ${CMAKE_GEN} ${CMAKE_OPTS} ${CMAKE_BUILD} $S 
## Target to create and activate a build directory
%.$D/.$A: ; mkdir -p $*.$D && rm -f *.$D/.$A && touch $@



#
# Targets to compile and run unit tests for specific build types
#

.PHONY: ${BUILDS:%=test-%}

## make test-<type>: Build and run tests under the given build type
#
# Tests are defined automatically by the standard CMake scripts for
# source files matching *.test.cpp and reuse their files' basenames
# prefixed by their containing directories.
#
# Define R=<regex> to run only tests matching the given pattern or
# E=<regex> to exclude tests matching the given pattern.
${BUILDS:%=test-%}: test-%: %-tests
	cd $*.$D && ${CTEST} ${CTEST_OPTS}



#
# Targets to install and/or package specific build types and source
#

.PHONY: ${BUILDS:%=install-%} ${BUILDS:%=package-%} package-src

## make install-<type>: Copy the given build to standard directories
${BUILDS:%=install-%}: install-%: %
	cd $*.$D && ${MAKE} ${MAKE_OPTS} install

## make package-<type>: Package the given build for distribution
#
# Define G=<generator> (TGZ, ZIP, etc.) to choose the archive type.
# See the CPack documentation for supported values of G.
${BUILDS:%=package-%}: package-%: %
	${CPACK} --config ${BIN_CONFIG} ${CPACK_OPTS}

## Package the project source (and this Makefile) for distribution
#
# Again, define G=<generator> to choose the archive type.
package-src: config-${ACTIVE}
	${CPACK} --config ${SRC_CONFIG} ${CPACK_OPTS}



#
# Target to auto-indent and -format code
#

.PHONY: style

## Run AStyle on all sources
#
# Standard options are:
#   -s [--indent=spaces=] 2
#   -a [--brackets=attach]
#   -y [--brackets=break-closing]
#   -C [--indent-classes]
#   -S [--indent-switches]
#   -K [--indent-cases]
#   -w [--indent-preprocessor]
#   -p [--pad=oper]
#   -U [--unpad=paren]
#   -v [--convert-tabs]
style: ; ${ASTYLE} ${ASTYLE_OPTS} ${SOURCES}



#
# Target to build documentation from source
#

.PHONY: doc

## Run Doxygen in conjunction with the Doxyfile
#
# The project name and version are based on the parent directory.
doc: ; ${DOXY_NAME} ${DOXY_NUMBER} ${DOXYGEN} ${DOXY_OPTS}



#
# Targets to create tags tables for Emacs and Vim
#

.PHONY: etags ctags

## Create and register Emacs tags table files
etags: ${ETAGS_FILE} ${LOCALS_FILE}
## Create and register Vim tags table files
ctags: ${CTAGS_FILE} ${EXRC_FILE}

## Create an Emacs tags table for the project
${ETAGS_FILE}: ${SOURCES}
	${ETAGS} ${ETAGS_OPTS} -o ${ETAGS_FILE} ${SOURCES}

## Create a Vim tags table for the project
${CTAGS_FILE}: ${SOURCES}
	${CTAGS} ${CTAGS_OPTS} -o ${CTAGS_FILE} ${SOURCES}

## Regiter eTAGS with Emacs for C/C++ files in the project directory
#
# Emacs buffers opened for files in or beneath directories containing
# .dir-locals.el load the listed settings under the given file modes.
${LOCALS_FILE}: ; echo ${TAGS_LOCALS} > ${LOCALS_FILE}

## Regiter cTAGS with Vim for all files in the project directory
#
# You must include "set exrc" in ~/.exrc or ~/.vimrc to make use of
# local .exrc files.  Vim processes run from directories containing
# .exrc (but not their subdirectories) load the listed settings.
${EXRC_FILE}: ; echo ${TAGS_EXRC} > ${EXRC_FILE}



#
# Targets to clean-up after compilation and/or editing
#

.PHONY: clean clean-src

## Delete all CMake temporaries and results of compilation
clean: ; rm -rf ${BUILDS:%=%.$D} _CPack_Packages
## Delete Emacs backup/autosave files thoughout the project
clean-src: ; rm -rf ${TEMPORARIES} _CPack_Packages
